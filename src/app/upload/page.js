'use client';

import { useState, useEffect } from "react";


export default function Upload() {
Â  const [images, setImages] = useState([]);
Â  const [description, setDescription] = useState("");
Â  const [genre, setGenre] = useState("Fantasy");
Â  const [storyLength, setStoryLength] = useState("Short");
Â  const [generateIllustrations, setGenerateIllustrations] = useState(false);
Â  const [whatIf, setWhatIf] = useState("");
Â  const [story, setStory] = useState(null);
Â  const [userAudio, setUserAudio] = useState(null);
Â  const [loading, setLoading] = useState(false);
  const [loadingMessage, setLoadingMessage] = useState("");
  const [imageCompression, setImageCompression] = useState(null);

  useEffect(() => {
    import('browser-image-compression').then(module => {
      setImageCompression(() => module.default);
    });
  }, []);

  // UPDATED: Now includes image compression
Â  async function handleImageChange(e) {
    if (!imageCompression) {
        alert("Image compression library is not loaded yet. Please try again in a moment.");
        return;
    }
Â  Â  const files = Array.from(e.target.files);

    const options = {
      maxSizeMB: 1,
      maxWidthOrHeight: 1024,
      useWebWorker: true,
    };

    console.log("Compressing images...");
    setLoading(true); // Show a loading state while compressing

    try {
      const compressedFilesPromises = files.map(file => imageCompression(file, options))
      const compressedFiles = await Promise.all(compressedFilesPromises);

      const filePreviews = compressedFiles.map(file => ({
  Â  Â  Â  file, // Use the new compressed file
  Â  Â  Â  preview: URL.createObjectURL(file),
  Â  Â  }));
  Â  Â  setImages(prev => [...prev, ...filePreviews]);

    } catch (error) {
      console.error("Image compression failed:", error);
      alert("There was an error processing your images.");
    } finally {
        setLoading(false); // Hide loader
    }
Â  Â  setStory(null);
Â  Â  setUserAudio(null);
Â  }

Â  function removeImage(index) {
Â  Â  setImages(prev => prev.filter((_, i) => i !== index));
Â  }

Â  function refineDescription() {
Â  Â  if (!description.trim()) {
Â  Â  Â  alert("Please enter a description first.");
Â  Â  Â  return;
Â  Â  }
Â  Â  setDescription(prev => prev + " ...enhanced with vivid details and rich context by AI.");
Â  }

  // UPDATED: Now calls your real backend API
Â  async function handleSubmit(e) {
Â  Â  e.preventDefault();
Â  Â  if (images.length === 0 && !description.trim()) {
Â  Â  Â  alert("Please upload photos or enter a description.");
Â  Â  Â  return;
Â  Â  }

Â  Â  setLoading(true);
    setLoadingMessage("âœ¨ Your AI is crafting a masterpiece...");
Â  Â  setStory(null);

Â  Â  const formData = new FormData();
Â  Â  images.forEach(image => {
Â  Â  Â  Â  formData.append('photos', image.file);
Â  Â  });

Â  Â  formData.append('description', description);
Â  Â  formData.append('genre', genre);
Â  Â  formData.append('storyLength', storyLength);
Â  Â  formData.append('whatIf', whatIf);

Â  Â  try {
Â  Â  Â  Â  const response = await fetch('/api/generate-story', {
Â  Â  Â  Â  Â  Â  method: 'POST',
Â  Â  Â  Â  Â  Â  body: formData,
Â  Â  Â  Â  });

Â  Â  Â  Â  if (!response.ok) {
Â  Â  Â  Â  Â  Â  throw new Error(`HTTP error! status: ${response.status}`);
Â  Â  Â  Â  }

Â  Â  Â  Â  const result = await response.json();
Â  Â  Â  Â  
Â  Â  Â  Â  let audioUrl = null;
        // The backend now sends `audioBase64`, so we create a data URL from it.
        setLoadingMessage("ðŸŽ¤ Generating audio narration...");
Â  Â  Â  Â  if (result.audioBase64) {
Â  Â  Â  Â  Â  Â  audioUrl = `data:audio/wav;base64,${result.audioBase64}`;
Â  Â  Â  Â  }
Â  Â  Â  Â  
Â  Â  Â  Â  const generatedStory = {
Â  Â  Â  Â  Â  Â  text: result.story,
Â  Â  Â  Â  Â  Â  audioUrl: audioUrl,
Â  Â  Â  Â  Â  Â  illustration: generateIllustrations ? "/illustration-sample.svg" : null,
Â  Â  Â  Â  };

Â  Â  Â  Â  setStory(generatedStory);

Â  Â  } catch (error) {
Â  Â  Â  Â  console.error("Error generating story:", error);
Â  Â  Â  Â  alert("Failed to generate story. Make sure your local servers (Ollama, etc.) are running.");
Â  Â  } finally {
Â  Â  Â  Â  setLoading(false);
        setLoadingMessage("");
Â  Â  }
Â  }

Â  function handleUserAudioUpload(e) {
Â  Â  const file = e.target.files[0];
Â  Â  if (file) {
Â  Â  Â  setUserAudio(URL.createObjectURL(file));
Â  Â  }
Â  }

Â  function saveToGallery() {
Â  Â  alert("Saved story and audio to your gallery.");
Â  }

Â  function downloadStory() {
Â  Â  if (!story || !story.text) return;
Â  Â  const blob = new Blob([story.text], { type: "text/plain" });
Â  Â  const link = document.createElement("a");
Â  Â  link.href = URL.createObjectURL(blob);
Â  Â  link.download = `story.txt`;
Â  Â  link.click();
Â  }

Â  function copyStory() {
Â  Â  if (!story || !story.text) return;
Â  Â  navigator.clipboard.writeText(story.text);
Â  Â  alert("Story copied to clipboard!");
Â  }

Â  return (
Â  Â  <div className="min-h-screen bg-gradient-to-br from-[#0f1216] via-[#3a1c71] to-[#24125a] text-[#E0E0E0] flex flex-col items-center py-16 px-6">
Â  Â  Â  <h1 className="text-5xl font-extrabold mb-3 text-[#7C4DFF] drop-shadow-lg text-center max-w-4xl">
Â  Â  Â  Â  Upload Photos or Describe a Scene & Create a Story
Â  Â  Â  </h1>
Â  Â  Â  <p className="max-w-3xl text-lg mb-8 text-center text-[#B0B0B0] leading-relaxed">
Â  Â  Â  Â  Upload multiple photos or enter a description. Optionally add a What-if scenario. Generate a single, immersive AI story combining all your inputs.
Â  Â  Â  </p>

Â  Â  Â  <form onSubmit={handleSubmit} className="w-full max-w-3xl bg-[#121622cc] backdrop-blur-md rounded-3xl p-10 shadow-lg border border-white/10 space-y-8">

Â  Â  Â  Â  {/* Upload Section */}
Â  Â  Â  Â  <label
Â  Â  Â  Â  Â  htmlFor="file-upload"
Â  Â  Â  Â  Â  className="block cursor-pointer rounded-lg border-2 border-dashed border-[#7C4DFF] py-12 text-center hover:border-[#00B4D8] transition select-none"
Â  Â  Â  Â  >
Â  Â  Â  Â  Â  <input
Â  Â  Â  Â  Â  Â  type="file"
Â  Â  Â  Â  Â  Â  id="file-upload"
Â  Â  Â  Â  Â  Â  multiple
Â  Â  Â  Â  Â  Â  accept="image/*"
Â  Â  Â  Â  Â  Â  onChange={handleImageChange}
Â  Â  Â  Â  Â  Â  className="hidden"
Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  <span className="text-[#7C4DFF] font-semibold hover:underline text-lg">
Â  Â  Â  Â  Â  Â  Click or drag-and-drop photos here to upload
Â  Â  Â  Â  Â  </span>
Â  Â  Â  Â  </label>

Â  Â  Â  Â  {/* Description Input */}
Â  Â  Â  Â  <div>
Â  Â  Â  Â  Â  <label htmlFor="desc" className="block mb-2 text-[#b0b7c1] font-semibold">Or enter a photo description</label>
Â  Â  Â  Â  Â  <textarea
Â  Â  Â  Â  Â  Â  id="desc"
Â  Â  Â  Â  Â  Â  rows={3}
Â  Â  Â  Â  Â  Â  value={description}
Â  Â  Â  Â  Â  Â  onChange={e => setDescription(e.target.value)}
Â  Â  Â  Â  Â  Â  placeholder="E.g., A couple standing on a mountain peak at sunset with a dog beside them."
Â  Â  Â  Â  Â  Â  className="w-full rounded-lg bg-[#1f2345] text-white p-4 resize-none placeholder-[#7278a5] focus:outline-none focus:ring-2 focus:ring-[#7C4DFF]"
Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  type="button"
Â  Â  Â  Â  Â  Â  onClick={refineDescription}
Â  Â  Â  Â  Â  Â  className="mt-2 px-5 py-2 bg-gradient-to-r from-[#7C4DFF] to-[#00B4D8] text-black font-semibold rounded-full hover:brightness-110 transition"
Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Refine with AI
Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  </div>

Â  Â  Â  Â  {/* Options */}
Â  Â  Â  Â  <div className="flex flex-wrap gap-6 items-center">
Â  Â  Â  Â  Â  <div className="flex flex-col flex-1 min-w-[150px]">
Â  Â  Â  Â  Â  Â  <label htmlFor="genre" className="mb-1 font-semibold text-[#b0b7c1]">Genre</label>
Â  Â  Â  Â  Â  Â  <select
Â  Â  Â  Â  Â  Â  Â  id="genre"
Â  Â  Â  Â  Â  Â  Â  value={genre}
Â  Â  Â  Â  Â  Â  Â  onChange={e => setGenre(e.target.value)}
Â  Â  Â  Â  Â  Â  Â  className="rounded-lg bg-[#1f2345] text-white p-3 focus:outline-none focus:ring-2 focus:ring-[#7C4DFF]"
Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  <option>Fantasy</option>
Â  Â  Â  Â  Â  Â  Â  <option>Romance</option>
Â  Â  Â  Â  Â  Â  Â  <option>Mystery</option>
Â  Â  Â  Â  Â  Â  Â  <option>Adventure</option>
Â  Â  Â  Â  Â  Â  Â  <option>Horror</option>
Â  Â  Â  Â  Â  Â  Â  <option>Comedy</option>
Â  Â  Â  Â  Â  Â  Â  <option>Drama</option>
Â  Â  Â  Â  Â  Â  Â  <option>Science Fiction</option>
Â  Â  Â  Â  Â  Â  </select>
Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  <div className="flex flex-col flex-1 min-w-[150px]">
Â  Â  Â  Â  Â  Â  <label htmlFor="length" className="mb-1 font-semibold text-[#b0b7c1]">Story Length</label>
Â  Â  Â  Â  Â  Â  <select
Â  Â  Â  Â  Â  Â  Â  id="length"
Â  Â  Â  Â  Â  Â  Â  value={storyLength}
Â  Â  Â  Â  Â  Â  Â  onChange={e => setStoryLength(e.target.value)}
Â  Â  Â  Â  Â  Â  Â  className="rounded-lg bg-[#1f2345] text-white p-3 focus:outline-none focus:ring-2 focus:ring-[#7C4DFF]"
Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  <option>Very Short</option>
Â  Â  Â  Â  Â  Â  Â  <option>Short</option>
Â  Â  Â  Â  Â  Â  Â  <option>Medium</option>
Â  Â  Â  Â  Â  Â  Â  <option>Long</option>
Â  Â  Â  Â  Â  Â  Â  <option>Epic</option>
Â  Â  Â  Â  Â  Â  </select>
Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  <div className="flex items-center space-x-3 select-none">
Â  Â  Â  Â  Â  Â  <input
Â  Â  Â  Â  Â  Â  Â  id="showIllustrations"
Â  Â  Â  Â  Â  Â  Â  type="checkbox"
Â  Â  Â  Â  Â  Â  Â  checked={generateIllustrations}
Â  Â  Â  Â  Â  Â  Â  onChange={() => setGenerateIllustrations(!generateIllustrations)}
Â  Â  Â  Â  Â  Â  Â  className="h-6 w-6 rounded border-gray-300 text-[#7C4DFF] focus:ring-[#7C4DFF]"
Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  <label htmlFor="showIllustrations" className="text-[#b0b7c1] font-semibold">
Â  Â  Â  Â  Â  Â  Â  Generate Story Illustrations
Â  Â  Â  Â  Â  Â  </label>
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  </div>

Â  Â  Â  Â  {/* Images Preview */}
Â  Â  Â  Â  {images.length > 0 && (
Â  Â  Â  Â  Â  <div className="grid grid-cols-3 gap-6 mt-8">
Â  Â  Â  Â  Â  Â  {images.map(({ preview }, i) => (
Â  Â  Â  Â  Â  Â  Â  <div key={i} className="relative rounded-2xl shadow-xl bg-[#1E2541CC] p-5 flex flex-col items-center hover:scale-105 transition">
Â  Â  Â  Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  Â  Â  Â  onClick={() => removeImage(i)}
Â  Â  Â  Â  Â  Â  Â  Â  Â  className="absolute top-2 right-2 bg-red-500 text-white px-2 py-1 rounded-lg text-xs"
Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  âœ•
Â  Â  Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  Â  Â  <img
Â  Â  Â  Â  Â  Â  Â  Â  Â  src={preview}
Â  Â  Â  Â  Â  Â  Â  Â  Â  alt={`preview-${i}`}
Â  Â  Â  Â  Â  Â  Â  Â  Â  className="rounded-lg object-cover w-full h-36 mb-4 shadow-lg"
Â  Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  ))}
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  )}

Â  Â  Â  Â  {/* What-if Input */}
Â  Â  Â  Â  <div>
Â  Â  Â  Â  Â  Â  <label className="text-[#b0b7c1] font-semibold mb-1 block">
Â  Â  Â  Â  Â  Â  Â  Enter a What-if scenario for your story (optional):
Â  Â  Â  Â  Â  Â  </label>
Â  Â  Â  Â  Â  Â  <input
Â  Â  Â  Â  Â  Â  Â  type="text"
Â  Â  Â  Â  Â  Â  Â  placeholder="E.g., What if the dog could talk?"
Â  Â  Â  Â  Â  Â  Â  value={whatIf}
Â  Â  Â  Â  Â  Â  Â  onChange={e => setWhatIf(e.target.value)}
Â  Â  Â  Â  Â  Â  Â  className="w-full rounded-lg bg-[#1f2345] text-white p-3 placeholder-[#7278a5] focus:outline-none focus:ring-2 focus:ring-[#7C4DFF]"
Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  </div>

Â  Â  Â  Â  {/* Submit Button & Loader */}
Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  type="submit"
Â  Â  Â  Â  Â  disabled={loading || (images.length === 0 && !description.trim())}
Â  Â  Â  Â  Â  className={`w-full py-4 rounded-full text-black text-xl font-extrabold transition ${
Â  Â  Â  Â  Â  Â  loading || (images.length === 0 && !description.trim())
Â  Â  Â  Â  Â  Â  Â  ? "bg-gray-600 cursor-not-allowed"
Â  Â  Â  Â  Â  Â  Â  : "bg-gradient-to-r from-[#7C4DFF] to-[#00B4D8] hover:brightness-110"
Â  Â  Â  Â  Â  }`}
Â  Â  Â  Â  >
Â  Â  Â  Â  Â  {loading ? 'Generating...' : 'Generate Memories'}
Â  Â  Â  Â  </button>
Â  Â  Â  Â  {loading && loadingMessage && (
Â  Â  Â  Â  Â  <div className="text-center text-lg text-[#B0B0B0] animate-pulse mt-6">
Â  Â  Â  Â  Â  Â  {loadingMessage}
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  )}

Â  Â  Â  Â  {/* Story Output */}
Â  Â  Â  Â  {story && (
Â  Â  Â  Â  Â  <div className="mt-8 rounded-2xl shadow-xl bg-[#1E2541CC] p-5 flex flex-col items-center">
Â  Â  Â  Â  Â  Â  <p className="text-base mb-3 text-[#b0b7c1] text-left px-2 whitespace-pre-wrap">{story.text}</p>
Â  Â  Â  Â  Â  Â  {story.illustration && (
Â  Â  Â  Â  Â  Â  Â  <img
Â  Â  Â  Â  Â  Â  Â  Â  src={story.illustration}
Â  Â  Â  Â  Â  Â  Â  Â  alt="Generated Illustration"
Â  Â  Â  Â  Â  Â  Â  Â  className="mb-3 rounded-lg shadow-md w-full"
Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  {/* The audio player will now only show up if story.audioUrl exists */}
Â  Â  Â  Â  Â  Â  {story.audioUrl && (
Â  Â  Â  Â  Â  Â  Â  Â  <audio controls src={story.audioUrl} className="mb-3 w-full rounded-lg shadow" />
Â  Â  Â  Â  Â  Â  )}

Â  Â  Â  Â  Â  Â  {/* Upload audio */}
Â  Â  Â  Â  Â  Â  <label className="text-sm underline cursor-pointer mb-2 text-[#7C4DFF] hover:text-[#00B4D8]">
Â  Â  Â  Â  Â  Â  Â  Upload Your Audio
Â  Â  Â  Â  Â  Â  Â  <input
Â  Â  Â  Â  Â  Â  Â  Â  type="file"
Â  Â  Â  Â  Â  Â  Â  Â  accept="audio/*"
Â  Â  Â  Â  Â  Â  Â  Â  onChange={handleUserAudioUpload}
Â  Â  Â  Â  Â  Â  Â  Â  className="hidden"
Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  </label>
Â  Â  Â  Â  Â  Â  {userAudio && (
Â  Â  Â  Â  Â  Â  Â  <audio controls src={userAudio} className="mb-3 w-full rounded-lg shadow" />
Â  Â  Â  Â  Â  Â  )}

Â  Â  Â  Â  Â  Â  {/* Actions */}
Â  Â  Â  Â  Â  Â  <div className="flex gap-2 w-full">
Â  Â  Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  Â  Â  type="button"
Â  Â  Â  Â  Â  Â  Â  Â  onClick={saveToGallery}
Â  Â  Â  Â  Â  Â  Â  Â  className="flex-1 py-2 rounded-full bg-gradient-to-r from-[#7C4DFF] to-[#00B4D8] text-black font-semibold hover:brightness-110 transition"
Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Save
Â  Â  _Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  Â  Â  type="button"
Â  Â  Â  Â  Â  Â  Â  Â  onClick={downloadStory}
Â  Â  Â  Â  Â  Â  Â  Â  className="flex-1 py-2 rounded-full bg-[#444] text-white font-semibold hover:bg-[#666] transition"
Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Download
Â  Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  Â  Â  type="button"
Â  Â  Â  Â  Â  Â  Â  Â  onClick={copyStory}
Â  Â  Â  Â  Â  Â  Â  Â  className="flex-1 py-2 rounded-full bg-[#333] text-white font-semibold hover:bg-[#555] transition"
Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Share
Â  Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  )}
Â  Â  Â  </form>
Â  Â  </div>
Â  );
}
